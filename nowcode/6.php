<?php
/**
 * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
 * 思路：这道题，让我对php中的位运算有了一定的了解。
 * 要解这道题，首先要明白的第一个概念是十进制转化为二进制，其实就是不断的对2进行整除，在php中位运算中可以用>>表示;
 * 如4>>1表示将4向右移一位，即4/2=2。
 * 第二个概念是，负数的补位，负数要转化为二进制，要先将其对应的整数转化为二进制，然后取反，最后再对结果+1;
 * 如：-4转化为二进制：先将4转化为二进制：0100，然后对其取反：1011，最后对结果+1：1100。
 * 第三个操作是&位与运算，将运算符号两边的数中都为1的位设为1；
 * 如2&3；2的二进制为：10，3的二进制为11，对这两个数进行&位与操作得到的结果为10，等于2
 * 第四点：位移在 PHP 中是数学运算。向任何方向移出去的位都被丢弃。左移时右侧以零填充，符号位被移走意味着正负号不被保留。
 * 右移时左侧以符号位填充，意味着正负号被保留。
 * 了解了这几个概念，下面开始解题
 */

/**
 * 第一个思路：
 * 运用1和n进行位与运算，结果要是为1，则n的最右边肯定是1，否则为0
 * 但是，这个只适用与正数，如果是负数，在对其进行右移时，在最高位(最左边)补的是1，所以在此会造成死循环
 */
function NumberOf1($n)
{
    $count = 0;
    while($n != 0){
        if(($n & 1) ==1 ){
            $count++;
        }
        $n = $n >> 1;
    }
    return $count;
}

/**
 * 思路二:当一个整数不为0时，他至少有一位是1，这时，我们将这个数-1，那么整数最右边的1就会变成0，而他身后的0就会变成1，
 * 而其余的位不受影响，如：1100，将其-1之后变为了1011，这时候我们对其做&操作，得到了1000，所以我们把一个整数-1，在和
 * 他本身做&运算，会把该整数最右边的一个1变为0，一个整数有多少位1，就能做多少次该运算。
 *
 * !!!!然而，这个解法在牛客上，用php并没有通过QAQ，然而java却通过了，歧视我大PHP
 */
function NumberOf2($n)
{
    $count = 0;
    while($n != 0){
        ++$count;
        $n = $n & ($n-1);
    }
    return $count;
}

/**
 * 最后看了一下第三种解法：这个解法就是遍历$n的每一位，并将其和1进行&运算，如果该位是1，则count++;
 * 因为int整数的最大长度就为32，所以循环31此就行了。
 * 这个解法是最好理解的，但在$n比较小时，这样做无疑是很浪费资源的
 */
function NumberOf3($n)
{
    $count = 0;
    for($i = 0;$i <32;$i++){
        if(($n >> $i) & 1){
            $count++;
        }
    }
    return $count;
}